Q2/ What is a ThreadPool, how to create a thread pool of 4 threads, and write down the
difference between the Callable and Runnable interface.

Ans:-
------

ThreadPool :-
----------

--A thread pool reuses previously created threads to execute current tasks and offers a solution 
  to the problem of thread cycle overhead and resource thrashing.
  
   Since the thread is already existing when the request arrives, the delay introduced by thread 
   creation is eliminated, making the application more responsive.
   Java provides the Executor framework which is centered around the Executor interface, its 
   sub-interface –ExecutorService and the class-ThreadPoolExecutor, which implements both of 
   these interfaces. By using the executor, one only has to implement the Runnable objects and 
   send them to the executor to execute.
   
   
   how to create is given on example:-   .java file
   
   The main difference between collable and runnable interrface is:-
   
  -Callable Interface:-
  --------------------- 

	In a callable interface that basically throws a checked exception and returns some results. This is one 
	of the major differences between the upcoming Runnable interface where no value is being returned. In 
	this interface, it simply computes a result else throws an exception if unable to do so.
	
	public interface Callable<V> 
	{
	  V call() throws exception ;
	}
	
	
	-It is declared in the ‘java.util.concurrent‘ package.
	-This interface also contains a single, no-argument method, called call() method
	-We can’t create a thread by passing callable as a parameter.
	-Callable can return results. Callable’s call() method contains the “throws Exception” clause, so we can 
     easily propagate checked exceptions further.
     
     
  -Runnable interface 

	When an object implementing this interface is used to create a thread, starting the thread causes the 
	object run method to be called in a separately executing thread. The general. contract of this run() 
	method is that it may take any action whatsoever. 
	
	public interface Runnable 
	{
	  public abstract void run();
	}
	
	
	-java.lang.Runnable is an interface and defines only one method called run(). 
	-It represents a task in Java that is executed by Thread.
	-There are two ways to start a new thread using Runnable, one is by implementing the Runnable interface 
	 and another one is by subclassing the Thread class.
	-Runnable cannot return the result of computation which is essential if you are performing some computing 
	 task in another thread, and Runnable cannot throw checked exceptions.   
		   
   